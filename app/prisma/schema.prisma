generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model masjid {
  id              BigInt            @id @default(autoincrement())
  nama_masjid     String
  nama_ketua_dkm  String
  no_hp           String
  jumatan         jumatan[]
  masjid_mubaligh masjid_mubaligh[]
  pengajian       pengajian[]
}

model mubaligh {
  id              BigInt            @id @default(autoincrement())
  nama_mubaligh   String
  no_hp           String
  jumatan         jumatan[]
  masjid_mubaligh masjid_mubaligh[]
  pengajian       pengajian[]
}

model pengajian {
  id          BigInt   @id @default(autoincrement())
  tanggal     DateTime @db.Date
  waktu       String
  id_masjid   BigInt
  id_mubaligh BigInt
  broadcasted Boolean  @default(false)
  masjid      masjid   @relation(fields: [id_masjid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mubaligh    mubaligh @relation(fields: [id_mubaligh], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model template {
  id                                                                   BigInt               @id @default(autoincrement())
  nama_template                                                        String               @unique
  content                                                              String
  type                                                                 template_t
  broadcast_schedule_broadcast_schedule_id_template_dkmTotemplate      broadcast_schedule[] @relation("broadcast_schedule_id_template_dkmTotemplate")
  broadcast_schedule_broadcast_schedule_id_template_mubalighTotemplate broadcast_schedule[] @relation("broadcast_schedule_id_template_mubalighTotemplate")
}

model user {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username String @unique
  password String
  role     role_t
}

model message_logs {
  id           BigInt           @id @default(autoincrement())
  no_hp        String
  message      String
  status       message_status_t
  send_time    DateTime         @db.Timestamptz(6)
  error_reason String?
}

model jumatan {
  id          BigInt   @id @default(autoincrement())
  tanggal     DateTime @db.Date
  id_masjid   BigInt
  id_mubaligh BigInt
  broadcasted Boolean  @default(false)
  masjid      masjid   @relation(fields: [id_masjid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mubaligh    mubaligh @relation(fields: [id_mubaligh], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model broadcast_schedule {
  id                                                         template_t @id
  active                                                     Boolean    @default(false)
  force_broadcast                                            Boolean    @default(false)
  h                                                          Int        @default(0)
  jam                                                        DateTime   @default(dbgenerated("'00:00:00+07'::time with time zone")) @db.Timetz(6)
  id_template_dkm                                            BigInt?
  id_template_mubaligh                                       BigInt?
  template_broadcast_schedule_id_template_dkmTotemplate      template?  @relation("broadcast_schedule_id_template_dkmTotemplate", fields: [id_template_dkm], references: [id], onDelete: NoAction, onUpdate: NoAction)
  template_broadcast_schedule_id_template_mubalighTotemplate template?  @relation("broadcast_schedule_id_template_mubalighTotemplate", fields: [id_template_mubaligh], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model customization {
  key   String @id
  value String
}

model masjid_mubaligh {
  id_masjid   BigInt
  id_mubaligh BigInt
  masjid      masjid   @relation(fields: [id_masjid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  mubaligh    mubaligh @relation(fields: [id_mubaligh], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id_masjid, id_mubaligh])
}

enum template_t {
  pengajian_bulanan
  pengajian_reminder
  jumatan_reminder
}

enum message_status_t {
  success
  failed
}

enum role_t {
  superadmin
  admin
}
